.btn {
  &,
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* if you want to give an element its own padding and margins give it inline-block. this also makes it get treated like text, so the text-align center property on .text-box applies*/
    display: inline-block;
    /* you can give this a very high value and the border will be the same every time */
    border-radius: 10rem;
    /* this property has to be on the initial state in order for the transforms to animate */
    transition: all 0.2s;
    position: relative;
    font-size: $default-font-size;

    //change for the <button> element
    border: none;
    cursor: pointer;
  }

  &:hover {
    transform: translateY(-0.3rem);
    /* 0 shadow in the x direction, 10px in the y, blur the shadow by 20px, and make it black with a .2 opacity */
    box-shadow: 0 10px 20px rgba($color-black, 0.2);

    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }

  &:active, &:focus {
    outline: none;
    transform: translateY(-0.1rem);
    box-shadow: 0 5px 10px rgba($color-black, 0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }
  
  &--green {
    background-color: $color-primary;
    color: $color-white;

    &::after {
      background-color: $color-white;
    }
  }

  /* the ::after pseudo element creates an element right after the one specified.  you always need to specify its content and display property */

  &::after {
    content: "";
    display: inline-block;
    /* the ::after psuedo element is treated like a child of the specified element, so you can specify width and height at 100% */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s;
  }

  &--animated {
    /* name, duration, time-function, delay */
    animation: moveInBottom 0.5s ease-out 0.75s;
    animation-fill-mode: backwards;
  }
}

.btn-text {
  &:link, &:visited{
    font-size: $default-font-size;
    color: $color-primary;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid $color-primary;
    padding: 3px;
    transition: all .2s;
  }
  &:hover {
    background-color: $color-primary;
    color: $color-white;
    box-shadow: 0 1rem 2rem rgba($color-black, .15);
    transform: translateY(-2px)
  }

  &:active {
    box-shadow: 0 1rem 1rem rgba($color-black, .15);
    transform: translateY(0)
  }
}
